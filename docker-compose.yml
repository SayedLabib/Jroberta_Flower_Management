version: '3.8'

services:
  # FastAPI Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: flower-management-app
    restart: unless-stopped
    environment:
      - OPEN_AI_API_KEY=${OPEN_AI_API_KEY}
      - OPEN_AI_MODEL=${OPEN_AI_MODEL:-gpt-4o}
      - DEBUG=${DEBUG:-false}
      - MIN_IMAGES_PER_REQUEST=${MIN_IMAGES_PER_REQUEST:-4}
      - MAX_IMAGES_PER_REQUEST=${MAX_IMAGES_PER_REQUEST:-6}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}  # 10MB default
    volumes:
      # Mount app directory for development (optional - remove for production)
      - ./app:/app/app:ro
    networks:
      - flower-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8066/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
    # Uncomment for development - allows direct access to FastAPI
    # ports:
    #   - "8066:8066"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: flower-management-nginx
    restart: unless-stopped
    ports:
      - "8066:8066"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-logs:/var/log/nginx
    networks:
      - flower-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: flower-management-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - flower-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional - for production monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: flower-management-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - flower-network
    profiles:
      - monitoring

  # Grafana for visualization (optional - for production monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: flower-management-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - flower-network
    profiles:
      - monitoring

# Networks
networks:
  flower-network:
    driver: bridge

# Volumes
volumes:
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local